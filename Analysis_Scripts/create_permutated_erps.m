function create_permutated_erps(filepath, team)
    % Author: Martin Constant (martin.constant@uni-bremen.de)
    rng("shuffle");
    n_permutations = 1e4;
    time_window = [100; 400];
    permuted_letters = zeros(1, n_permutations, 'double');
    permuted_colors = zeros(1, n_permutations, 'double');
    participants = [1:3];
    lch = 1;
    rch = 2;
    for id = participants
        epoched = sprintf('%s_participant%i_epoched_small.set', team, id);
        EEG = pop_loadset(epoched, [filepath filesep team filesep 'EEG']);
        EEG_letters = pop_selectevent( EEG, ...
            'bini', [1 4], ...
            'deleteevents','off', ...
            'deleteepochs','on', ...
            'invertepochs','off');
        EEG_letters_right = pop_selectevent( EEG, ...
            'bini', [2 5], ...
            'deleteevents','off', ...
            'deleteepochs','on', ...
            'invertepochs','off');
        EEG_colors_left = pop_selectevent( EEG, ...
            'bini', [7 10], ...
            'deleteevents','off', ...
            'deleteepochs','on', ...
            'invertepochs','off');
        EEG_colors_right = pop_selectevent( EEG, ...
            'bini', [8 11], ...
            'deleteevents','off', ...
            'deleteepochs','on', ...
            'invertepochs','off');
        time_idx = dsearchn(EEG.times', time_window)';

        EEG_colors_contra = mean(EEG_colors_left(rch,time_idx(1):time_idx(2),:))*0.5 + mean(EEG_colors_right(lch,time_idx(1):time_idx(2),:))*0.5;

        all_eegs(id) = EEG;
        ERP = pop_averager(EEG, 'Criterion', 'all', 'DQ_custom_wins', 0, 'DQ_flag', 1, 'DQ_preavg_txt', 0, 'ExcludeBoundary', 'on', 'SEM', 'on' );
        ERP = pop_binoperator( ERP, {'prepareContraIpsi', ...
        'Lch = [1];', ...
        'Rch = [2];', ...
        'nbin1 = 0.5*bin1@Rch + 0.5*bin2@Lch label M Contra', ...
        'nbin2 = 0.5*bin1@Lch + 0.5*bin2@Rch label M Ipsi', ...
        'nbin3 = 0.5*bin4@Rch + 0.5*bin5@Lch label W Contra', ...
        'nbin4 = 0.5*bin4@Lch + 0.5*bin5@Rch label W Ipsi', ...
        'nbin5 = 0.5*bin7@Rch + 0.5*bin8@Lch label Blue Contra', ...
        'nbin6 = 0.5*bin7@Lch + 0.5*bin8@Rch label Blue Ipsi', ...
        'nbin7 = 0.5*bin10@Rch + 0.5*bin11@Lch label Green Contra', ...
        'nbin8 = 0.5*bin10@Lch + 0.5*bin11@Rch label Green Ipsi'});
        ERP = pop_binoperator( ERP, {'nbin1 = ((bin1 - bin2) + (bin3 - bin4))/2 label Letters Contra-Ipsi', ...
            'nbin2 = ((bin5 - bin6) + (bin7 - bin8))/2 label Letters Contra-Ipsi'});
        all_erps(id) = ERP;
    end
    time_idx = dsearchn(EEG.times', time_window)';
    Ts = 1/EEG.srate;

    GA = pop_gaverager( all_erps , 'DQ_flag', 1, 'Erpsets', 1:length(all_erps), 'ExcludeNullBin', 'on', 'SEM', 'on' );

    observed_AUC_letters = compute_AUC(GA, time_idx, Ts, "neg", 1);
    observed_AUC_colors = compute_AUC(GA, time_idx, Ts, "neg", 2);


    for perm = 1:n_permutations
        for id = 1:participants
            EEG = all_eegs(id);
            EEG.data = shuffle(EEG.data, 1);
            ERP = pop_averager(EEG, 'Criterion', 'all', 'DQ_custom_wins', 0, 'DQ_flag', 1, 'DQ_preavg_txt', 0, 'ExcludeBoundary', 'on', 'SEM', 'on' );
            ERP = pop_binoperator( ERP, {'prepareContraIpsi', ...
            'Lch = [1];', ...
            'Rch = [2];', ...
            'nbin1 = 0.5*bin1@Rch + 0.5*bin2@Lch label M Contra', ...
            'nbin2 = 0.5*bin1@Lch + 0.5*bin2@Rch label M Ipsi', ...
            'nbin3 = 0.5*bin4@Rch + 0.5*bin5@Lch label W Contra', ...
            'nbin4 = 0.5*bin4@Lch + 0.5*bin5@Rch label W Ipsi', ...
            'nbin5 = 0.5*bin7@Rch + 0.5*bin8@Lch label Blue Contra', ...
            'nbin6 = 0.5*bin7@Lch + 0.5*bin8@Rch label Blue Ipsi', ...
            'nbin7 = 0.5*bin10@Rch + 0.5*bin11@Lch label Green Contra', ...
            'nbin8 = 0.5*bin10@Lch + 0.5*bin11@Rch label Green Ipsi'});
            ERP = pop_binoperator( ERP, {'nbin1 = ((bin1 - bin2) + (bin3 - bin4))/2 label Letters Contra-Ipsi', ...
                'nbin2 = ((bin5 - bin6) + (bin7 - bin8))/2 label Letters Contra-Ipsi'});
            all_erps(id) = ERP;
        end
        GA = pop_gaverager( all_erps , 'DQ_flag', 1, 'Erpsets', 1:length(all_erps), 'ExcludeNullBin', 'on', 'SEM', 'on' );
        
        % AUC
        permuted_letters(perm) = compute_AUC(GA, time_idx, Ts, "neg", 1); 
        permuted_colors(perm) = compute_AUC(GA, time_idx, Ts, "neg", 2);
    end

    histogram(permuted_letters);

end

function auc = compute_AUC(ERP, times, Ts, sign, bin)
        amplitudes = ERP.bindata(1, times(1):times(2), bin);
        if sign == "neg"
            amplitudes = -amplitudes;
        end
        amplitudes(amplitudes < 0) = 0;
        
        % AUC
        auc = Ts*trapz(amplitudes); 
end
